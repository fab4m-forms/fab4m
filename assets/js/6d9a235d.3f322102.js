"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8300],{448:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>v,default:()=>T,frontMatter:()=>h,metadata:()=>C,toc:()=>F});var r=n(7462),i=n(7294),o=n(3905),a=n(1809),s=n(891);const p=(0,s.Zg)({type:{widget:e=>{var t;return i.createElement("input",(0,r.Z)({type:"text",name:e.name,id:e.id,required:e.component.required,disabled:e.component.disabled,value:null!=(t=e.value)?t:"",onChange:t=>{e.onChange(t.currentTarget.value)}},e.attributes))}}}),d=(0,s.Np)({name:(0,s.$S)({label:"Your name",required:!0,widget:p})});function m(){return i.createElement(s.H,{form:d,hideSubmit:!0})}const u=(0,s.Zg)({type:{widget:e=>{var t;return i.createElement(s.yy,e,i.createElement("input",(0,r.Z)({type:"text",name:e.name,id:e.id,required:e.component.required,disabled:e.component.disabled,value:null!=(t=e.value)?t:"",onChange:t=>{e.onChange(t.currentTarget.value)}},e.attributes)))}}}),l=(0,s.Np)({name:(0,s.$S)({label:"Your name",required:!0,widget:u})});function c(){return i.createElement(s.H,{form:l,hideSubmit:!0})}const g=(0,s.Zg)({type:{widget:e=>{var t;return i.createElement("input",(0,r.Z)({type:"text",name:e.name,id:e.id,required:e.component.required,disabled:e.component.disabled,value:null!=(t=e.value)?t:"",onChange:t=>{e.onChange(t.currentTarget.value)}},e.attributes))}}}),f=(0,s.Np)({name:(0,s.$S)({label:"Your name",required:!0,widget:g})});function b(){return i.createElement(s.H,{form:f,hideSubmit:!0})}const w=(0,s.Np)({name:(0,s.$S)({label:"Your name",required:!0,widget:(x={color:"blue"},(0,s.Zg)({type:{widget:e=>{var t;return i.createElement("input",(0,r.Z)({type:"text",name:e.name,id:e.id,style:{background:e.settings.color},required:e.component.required,disabled:e.component.disabled,value:null!=(t=e.value)?t:"",onChange:t=>{e.onChange(t.currentTarget.value)}},e.attributes))}},settings:x}))})});var x;function y(){return i.createElement(s.H,{form:w,hideSubmit:!0})}const h={sidebar_position:1},v="Creating widgets",C={unversionedId:"extending/widgets",id:"extending/widgets",title:"Creating widgets",description:"Sometimes you need to make custom widgets if you need more control over the",source:"@site/docs/extending/widgets.mdx",sourceDirName:"extending",slug:"/extending/widgets",permalink:"/docs/extending/widgets",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"URL field",permalink:"/docs/components/url"},next:{title:"And",permalink:"/docs/rules/and"}},k={},F=[{value:"A very basic example",id:"a-very-basic-example",level:2},{value:"Using the fab4m wrapper",id:"using-the-fab4m-wrapper",level:2},{value:"Typescript support",id:"typescript-support",level:2},{value:"Providing settings for your widget",id:"providing-settings-for-your-widget",level:2}],S={toc:F};function T(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},S,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"creating-widgets"},"Creating widgets"),(0,o.kt)("p",null,"Sometimes you need to make custom widgets if you need more control over the\nmarkup or need to introduce new functionality into your forms."),(0,o.kt)("h2",{id:"a-very-basic-example"},"A very basic example"),(0,o.kt)("p",null,"The example below is the smallest possible working example for creating a widget:"),(0,o.kt)(a.Z,{source:'import React from "react";\nimport { createForm, textField, StatefulFormView, widget } from "@fab4m/fab4m";\nimport "@fab4m/fab4m/css/basic/basic.css";\n\nconst customTextFieldWidget = widget({\n  type: {\n    widget: (props) => {\n      return (\n        <input\n          type="text"\n          name={props.name}\n          id={props.id}\n          required={props.component.required}\n          disabled={props.component.disabled}\n          value={props.value ?? ""}\n          onChange={(e) => {\n            props.onChange(e.currentTarget.value);\n          }}\n          {...props.attributes}\n        />\n      );\n    },\n  },\n});\n\nconst form = createForm({\n  name: textField({\n    label: "Your name",\n    required: true,\n    widget: customTextFieldWidget,\n  }),\n});\n\nexport default function CustomWidgetExample() {\n  return <StatefulFormView form={form} hideSubmit={true} />;\n}\n',example:(0,o.kt)(m,{mdxType:"BasicWidget"}),mdxType:"Example"}),(0,o.kt)("h2",{id:"using-the-fab4m-wrapper"},"Using the fab4m wrapper"),(0,o.kt)("p",null,"If you want to provide most of the basic functionality that is\nprovided with the standard fab4m widgets you can wrap your widget in\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"FormComponentWrapper")," component."),(0,o.kt)(a.Z,{source:'import React from "react";\nimport {\n  createForm,\n  textField,\n  StatefulFormView,\n  widget,\n  FormComponentWrapper,\n} from "@fab4m/fab4m";\nimport "@fab4m/fab4m/css/basic/basic.css";\n\nconst fab4mWidget = widget({\n  type: {\n    widget: (props) => {\n      return (\n        <FormComponentWrapper {...props}>\n          <input\n            type="text"\n            name={props.name}\n            id={props.id}\n            required={props.component.required}\n            disabled={props.component.disabled}\n            value={props.value ?? ""}\n            onChange={(e) => {\n              props.onChange(e.currentTarget.value);\n            }}\n            {...props.attributes}\n          />\n        </FormComponentWrapper>\n      );\n    },\n  },\n});\n\nconst form = createForm({\n  name: textField({\n    label: "Your name",\n    required: true,\n    widget: fab4mWidget,\n  }),\n});\n\nexport default function CustomWidgetExample() {\n  return <StatefulFormView form={form} hideSubmit={true} />;\n}\n',example:(0,o.kt)(c,{mdxType:"Fab4mWidget"}),mdxType:"Example"}),(0,o.kt)("h2",{id:"typescript-support"},"Typescript support"),(0,o.kt)("p",null,"You can define the data type that the widget is operating on, as well as\nthe settings type that the widget is using (see the next section):"),(0,o.kt)(a.Z,{source:'import React from "react";\nimport { createForm, textField, StatefulFormView, widget } from "@fab4m/fab4m";\nimport "@fab4m/fab4m/css/basic/basic.css";\n\nconst customTextFieldWidget = widget<string>({\n  type: {\n    widget: (props) => {\n      return (\n        <input\n          type="text"\n          name={props.name}\n          id={props.id}\n          required={props.component.required}\n          disabled={props.component.disabled}\n          value={props.value ?? ""}\n          onChange={(e) => {\n            props.onChange(e.currentTarget.value);\n          }}\n          {...props.attributes}\n        />\n      );\n    },\n  },\n});\n\nconst form = createForm({\n  name: textField({\n    label: "Your name",\n    required: true,\n    widget: customTextFieldWidget,\n  }),\n});\n\nexport default function CustomWidgetExample() {\n  return <StatefulFormView form={form} hideSubmit={true} />;\n}\n',example:(0,o.kt)(b,{mdxType:"TypescriptSupport"}),mdxType:"Example"}),(0,o.kt)("h2",{id:"providing-settings-for-your-widget"},"Providing settings for your widget"),(0,o.kt)("p",null,"You can define settings for your widget, in those situations it's best\nto provide a function to create your widget with the appropriate settings."),(0,o.kt)(a.Z,{source:'import React from "react";\nimport { createForm, textField, StatefulFormView, widget } from "@fab4m/fab4m";\nimport "@fab4m/fab4m/css/basic/basic.css";\n\ntype CustomWidgetSettings = {\n  color: string;\n};\n\nfunction myCustomWidget(settings: CustomWidgetSettings) {\n  return widget<string, CustomWidgetSettings>({\n    type: {\n      widget: (props) => {\n        return (\n          <input\n            type="text"\n            name={props.name}\n            id={props.id}\n            style={{ background: props.settings.color }}\n            required={props.component.required}\n            disabled={props.component.disabled}\n            value={props.value ?? ""}\n            onChange={(e) => {\n              props.onChange(e.currentTarget.value);\n            }}\n            {...props.attributes}\n          />\n        );\n      },\n    },\n    settings,\n  });\n}\n\nconst form = createForm({\n  name: textField({\n    label: "Your name",\n    required: true,\n    widget: myCustomWidget({ color: "blue" }),\n  }),\n});\n\nexport default function CustomWidgetExample() {\n  return <StatefulFormView form={form} hideSubmit={true} />;\n}\n',example:(0,o.kt)(y,{mdxType:"WidgetSettings"}),mdxType:"Example"}))}T.isMDXComponent=!0}}]);