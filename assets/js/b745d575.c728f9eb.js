"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9478],{10808:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var r=t(87924),a=t(74848),i=t(28453);const o={},s="Fab4m and Laravel: Creating a simple form builder",l={authorsImageUrls:[]},d=[{value:"Create a new model, migration and controller",id:"create-a-new-model-migration-and-controller",level:2},{value:"Creating a form for creating forms",id:"creating-a-form-for-creating-forms",level:2},{value:"Saving our form",id:"saving-our-form",level:2},{value:"Viewing the form",id:"viewing-the-form",level:2},{value:"Saving submissions",id:"saving-submissions",level:2},{value:"Taking care of our submissions on the frontend",id:"taking-care-of-our-submissions-on-the-frontend",level:2},{value:"That&#39;s it",id:"thats-it",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["In the ",(0,a.jsx)(n.a,{href:"/blog/2022/12/16/fab4m-and-laravel",children:"previous blog post"})," we got started\nwith Laravel and Inertia and showed how we can use Fab4m inside of\nthis environment to generate our forms."]}),"\n",(0,a.jsx)(n.p,{children:"Now let's flex our muscles a bit more and create a form builder. This\nis were fab4m really shines!"}),"\n",(0,a.jsx)(n.h2,{id:"create-a-new-model-migration-and-controller",children:"Create a new model, migration and controller"}),"\n",(0,a.jsx)(n.p,{children:"We start by setting up a new form controller:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"php artisan make:model Form -c -m -r\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We start with defining our migration (",(0,a.jsx)(n.code,{children:"database/migrations/[date]_create_forms_table.php"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function up()\n{\n    Schema::create('forms', function (Blueprint $table) {\n        $table->id();\n        $table->text('title');\n        $table->json('form');\n        $table->text('schema');\n        $table->timestamps();\n    });\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"We want to store a title, the form structure and the schema. Notice that we're storing\nthe schema as a string. This is because it's easier to store it as a json string, Laravel converts data that comes in to php arrays, which will mess up the schema in certain situations."}),"\n",(0,a.jsx)(n.p,{children:"Let's apply the migration, you need to run it through Laravel Sail:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"vendor/bin/sail artisan migrate\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We also need to adjust our model (",(0,a.jsx)(n.code,{children:"app/Models/Form.php"}),") to allow us to fill in some fields:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Form extends Model\n{\n    protected $fillable = ['title', 'schema', 'form'];\n\n    protected $casts = [\n        'form' => 'json',\n    ];\n    use HasFactory;\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Let's move on to the controller and set it up to render an Inertia view for creating forms:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function create()\n{\n    return Inertia::render('Form/Create', []);\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"creating-a-form-for-creating-forms",children:"Creating a form for creating forms"}),"\n",(0,a.jsx)(n.p,{children:"Now for something fun! We're going to create a fab4m form for definining\nother fab4m forms!"}),"\n",(0,a.jsx)(n.p,{children:"Fab4m is designed to be easily composed together from different parts."}),"\n",(0,a.jsx)(n.p,{children:'Here\'s a "Form builder form" that exposes some of the options that are available\nin fab4m:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import {\n    createForm,\n    textFieldType,\n    textField,\n    booleanField,\n    textFieldWidgetType,\n    textAreaWidgetType,\n    integerFieldType,\n    booleanFieldType,\n    selectWidget,\n    group,\n} from "@fab4m/fab4m";\n\nconst fieldTypes = [textFieldType, integerFieldType, booleanFieldType];\nexport default createForm({\n    title: textField({ label: "Title", required: true }),\n    fields: group(\n        {\n            label: "Fields",\n            minItems: 1,\n            multiple: true,\n        },\n        {\n            name: textField({ label: "Field name", required: true }),\n            label: textField({ label: "Label", required: true }),\n            field: textField({\n                label: "Field type",\n                required: true,\n                widget: selectWidget(\n                    fieldTypes.map((field) => [field.name, field.title])\n                ),\n            }),\n            required: booleanField({ label: "Required" }),\n            multiple: booleanField({ label: "Multiple" }),\n        }\n    ),\n});\n'})}),"\n",(0,a.jsx)(n.p,{children:"Some things to unpack here:"}),"\n",(0,a.jsxs)(n.p,{children:["We start with importing some component ",(0,a.jsx)(n.strong,{children:"types"})," from fab4m. The\ncomponent type definition is what drives each fab4m component under\nthe hood. We're going to use these definitions to build our final forms."]}),"\n",(0,a.jsx)(n.p,{children:"We then proceed with creating our form based on these component types. We\ndefine a fab4m group field which represents each field in the form we\nare creating.  Each field has a name, label field type and options for\nif the field is required and multiple."}),"\n",(0,a.jsxs)(n.p,{children:["Let's get back to our Inertia view (",(0,a.jsx)(n.code,{children:"resources/js/Pages/Form/Create.jsx"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import GuestLayout from "@/Layouts/GuestLayout";\nimport { Inertia } from "@inertiajs/inertia";\nimport { Head } from "@inertiajs/inertia-react";\nimport "@fab4m/fab4m/css/basic/basic.css";\nimport form from "../../Forms/Form";\nimport { StatefulFormView } from "@fab4m/fab4m";\n\nexport default function Create() {\n    form.onSubmit((e, data) => {\n        e.preventDefault();\n    });\n    return (\n        <GuestLayout>\n            <Head title="Create new diary" />\n            <h2 className="font-semibold text-xl text-gray-800 leading-tight">\n                Create a new form\n            </h2>\n            <div className="py-12">\n                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">\n                    <StatefulFormView form={form} />\n                </div>\n            </div>\n        </GuestLayout>\n    );\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Go to ",(0,a.jsx)(n.a,{href:"http://localhost/forms/create",children:"http://localhost/forms/create"}),"\nYou should see our simple form builder!"]}),"\n",(0,a.jsx)(n.h2,{id:"saving-our-form",children:"Saving our form"}),"\n",(0,a.jsx)(n.p,{children:"We now have a form that can generate the form. The next step is to transform\nthe data from the form into something we can store and then render."}),"\n",(0,a.jsx)(n.p,{children:"We can accomplish this by creating a fab4m form from the form data we are saving."}),"\n",(0,a.jsx)(n.p,{children:"Let's go back to our form file and make a function to transform\nour data into a full fab4m form:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"export function fab4mFromData(data) {\n    const form = createForm();\n    for (const field of data.fields) {\n        const fieldType = fieldTypes.find(\n            (type) => type.name === field.fieldType\n        );\n        form.add(\n            formComponent({\n                type: fieldType,\n                name: `field_${form.components.length}`,\n                label: field.label,\n                required: field.required,\n                widget: widgets[fieldType.name](),\n            })\n        );\n    }\n    return serialize(form);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"This function takes the data from our form and transforms it into a fab4m form.\nNotice that we serialize the form on the last line. This translates the form\ninto a format that can be stored as a json structure anywhere and then\ndeserialized back into a form later."}),"\n",(0,a.jsx)(n.p,{children:"Over in our Create view we can now add our code to save the form back\nto our endpoint:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'...\nimport { StatefulFormView, generateSchema, serialize } from "@fab4m/fab4m";\n...\nexport default function Create() {\n    form.onSubmit((e, data) => {\n        e.preventDefault();\n        const form = fab4mFromData(data);\n        Inertia.post(route("forms.store"), {\n            title: data.title,\n            schema: JSON.stringify(generateSchema(form)),\n            form: serialize(form),\n        });\n    });\n...\n'})}),"\n",(0,a.jsx)(n.p,{children:"Note that we generate the JSON schema here and send it along to the backend. Note the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"We are generating the schema for the form above so that it can be\nused for validation later."}),"\n",(0,a.jsx)(n.li,{children:"We use the serialize() function to serialize the form into something that can be\nstored as a JSON object."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Let's implement the store function in ",(0,a.jsx)(n.code,{children:"app/Http/Controllers/FormController.php"})," to handle our request:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function store(Request $request)\n{\n    $form = Form::create($request->validate([\n        'title' => ['required', 'string'],\n        'schema' => ['required', 'array'],\n        'form' => ['required', 'array'],\n    ]));\n    return Redirect::route('forms.show', [$form->id]);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"This will save our form into the database."}),"\n",(0,a.jsx)(n.admonition,{type:"caution",children:(0,a.jsx)(n.p,{children:"You need more strict validation than this! This is good enough for a demo,\nbut it doesn't guarantee that the provided data is valid."})}),"\n",(0,a.jsx)(n.h2,{id:"viewing-the-form",children:"Viewing the form"}),"\n",(0,a.jsx)(n.p,{children:"Now that we saved our form, it's time to render it!"}),"\n",(0,a.jsx)(n.p,{children:"Let's stay in our FormController and add the following to the show function:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function show(Form $form)\n{\n    return Inertia::render(\"Form/Show\", ['form' => $form]);\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Before we dive into our Page component, let's add a new helper function to the Form.jsx file:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:"export async function unserializeForm(form) {\n    return await unserialize(\n        form,\n        [textFieldType, booleanFieldType, integerFieldType],\n        [basic],\n        [textFieldWidgetType, checkboxWidgetType, numberFieldWidgetType],\n        [],\n        [],\n        []\n    );\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now we can render the form in the ",(0,a.jsx)(n.code,{children:"resources/js/Pages/Form/Show.jsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import { useState, useEffect } from "react";\nimport GuestLayout from "@/Layouts/GuestLayout";\nimport { Inertia } from "@inertiajs/inertia";\nimport { Head } from "@inertiajs/inertia-react";\nimport "@fab4m/fab4m/css/basic/basic.css";\nimport { unserializeForm } from "../../Forms/Form";\nimport { StatefulFormView, useForm } from "@fab4m/fab4m";\n\nexport default function Show({ form }) {\n    const [unserializedForm, changeUnserializedForm] = useState(null);\n    useEffect(() => {\n        unserializeForm(form.form).then(changeUnserializedForm);\n    }, []);\n    return (\n        <GuestLayout>\n            <Head title="Show form" />\n            <h2 className="font-semibold text-xl text-gray-800 leading-tight">\n                Create a new form\n            </h2>\n            <div className="py-12">\n                <div className="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">\n                    {unserializedForm && (\n                        <StatefulFormView form={unserializedForm} />\n                    )}\n                </div>\n            </div>\n        </GuestLayout>\n    );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Normally you wouldn't want to unserialize the form within the\ncomponent, but since this is the entry point for inertia I don't\nthink we have a choice."}),"\n",(0,a.jsxs)(n.p,{children:["Now, if you head over to\n",(0,a.jsx)(n.a,{href:"http://localhost/forms/create",children:"http://localhost/forms/create"})," and\ncreate a form, you should be redirect to the show page, where your\nform is shown. That's pretty neat!"]}),"\n",(0,a.jsx)(n.h2,{id:"saving-submissions",children:"Saving submissions"}),"\n",(0,a.jsx)(n.p,{children:"We can now render the form, but let's take this a step further. Why not deal with handling submissions from any form you fancy creating with our new builder?"}),"\n",(0,a.jsx)(n.p,{children:"We start the usual way, by creating a new model for our submissions:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"php artisan make:model FormSubmission -c -m -r\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Let's start with setting up the migration\n(",(0,a.jsx)(n.code,{children:"database/migrations/[date]-create_form_submissions_table.php"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"public function up()\n{\n    Schema::create('form_submissions', function (Blueprint $table) {\n        $table->id();\n        $table->foreignId('form_id')->constrained();\n        $table->json('submission');\n        $table->timestamps();\n    });\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["And then we set up the model (",(0,a.jsx)(n.code,{children:"app/Models/FormSubmission.php"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass FormSubmission extends Model\n{\n    use HasFactory;\n    protected $fillable = ['form_id', 'submission'];\n    protected $casts = [\n        'submission' => 'json',\n    ];\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Then, for our controller, let's implement the store and show methods:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-php",children:"...\nuse Illuminate\\Support\\Facades\\Redirect;\nuse Inertia\\Inertia;\nuse Opis\\JsonSchema\\Validator;\nuse Opis\\JsonSchema\\Errors\\ErrorFormatter;\n...\npublic function store(Request $request, Form $form, FormSubmission $formSubmission)\n{\n    $validator = new Validator();\n    $result = $validator->validate((object)$request->get('submission'), $form->schema);\n    if (!$result->isValid()) {\n        abort(422, (new ErrorFormatter())->format($result->error()));\n    }\n    $submission = FormSubmission::create([\n        'form_id' => $form->id,\n        'submission' => $request->get('submission'),\n    ]);\n    return Redirect::route('forms.submissions.show', [$form->id, $submission->id]);\n}\n\npublic function show(Form $form, FormSubmission $submission)\n{\n    return Inertia::render(\"FormSubmission/Show\", ['submission' => $submission]);\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["The magic happens in the ",(0,a.jsx)(n.code,{children:"store"})," method. We validate our incoming request using our\nJSON Schema validator, and then save our submission."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"show"})," method renders an Inertia view to show our submission."]}),"\n",(0,a.jsx)(n.h2,{id:"taking-care-of-our-submissions-on-the-frontend",children:"Taking care of our submissions on the frontend"}),"\n",(0,a.jsxs)(n.p,{children:["Let's expand on our ",(0,a.jsx)(n.code,{children:"Show"})," component a bit:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'...\nexport default function Show({ form }) {\n    const [unserializedForm, changeUnserializedForm] = useState(null);\n    useEffect(() => {\n        unserializeForm(form.form).then(changeUnserializedForm);\n    }, []);\n    unserializedForm?.onSubmit((e, data) => {\n        e.preventDefault();\n        Inertia.post(route("forms.submissions.store", [form.id]), {\n            submission: data,\n        });\n    });\n...\n'})}),"\n",(0,a.jsx)(n.p,{children:"We add an onSubmit function to the form, and store the data coming through\nfrom the form."}),"\n",(0,a.jsxs)(n.p,{children:["Then in the ",(0,a.jsx)(n.code,{children:"resources/js/Pages/FormSubmission/Show.jsx"})," we add the following:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-jsx",children:'import GuestLayout from "@/Layouts/GuestLayout";\nimport { Inertia } from "@inertiajs/inertia";\nimport { Head, Link } from "@inertiajs/inertia-react";\n\nexport default function Show({ submission }) {\n    const data = [];\n    for (const key in submission.submission) {\n        data.push(\n            <li key={key}>\n                <strong>{`${key}: `}</strong>\n                {submission.submission[key]}\n            </li>\n        );\n    }\n    return (\n        <GuestLayout>\n            <Head title="Submission" />\n            <h2 className="font-semibold text-xl text-gray-800 leading-tight">\n                Submission\n            </h2>\n            <div className="py-12">\n                <ul>{data}</ul>\n            </div>\n        </GuestLayout>\n    );\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This will render the data that was just submitted!"}),"\n",(0,a.jsx)(n.h2,{id:"thats-it",children:"That's it"}),"\n",(0,a.jsx)(n.p,{children:"That was a long post! But we accomplished a lot:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"We made it possible to create any form and save it along with a schema to validate it."}),"\n",(0,a.jsx)(n.li,{children:"We made it possible to save submissions for that form."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"There are of course tons of features we didn't expose here, but it's still a nice\ndemo of how to construct any form you'd like and validate easily."}),"\n",(0,a.jsxs)(n.p,{children:["The source is available in the ",(0,a.jsx)(n.a,{href:"https://github.com/fab4m-forms/fab4m-laravel-example",children:"fab4m laravel example repository"}),"."]})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},87924:e=>{e.exports=JSON.parse('{"permalink":"/blog/2022/12/18/form-builder-with-laravel","source":"@site/blog/2022-12-18-form-builder-with-laravel.md","title":"Fab4m and Laravel: Creating a simple form builder","description":"In the previous blog post we got started","date":"2022-12-18T00:00:00.000Z","tags":[],"readingTime":7.985,"hasTruncateMarker":true,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Remix and fab4m","permalink":"/blog/2023/01/28/remix-with-fab4m"},"nextItem":{"title":"Using fab4m with Laravel and Inertia.js","permalink":"/blog/2022/12/16/fab4m-and-laravel"}}')}}]);