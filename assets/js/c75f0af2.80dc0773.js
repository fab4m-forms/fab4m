"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[637],{5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),o=n(6010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>p});var a=n(7462),o=n(7294),r=n(6010),l=n(2389),i=n(7392),s=n(7094),m=n(2466);const d="tabList__CuJ",u="tabItem_LNqP";function c(e){var t,n;const{lazy:l,block:c,defaultValue:p,values:h,groupId:f,className:g}=e,b=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=h?h:b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),w=(0,i.l)(v,((e,t)=>e.value===t.value));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===p?p:null!=(t=null!=p?p:null==(n=b.find((e=>e.props.default)))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:x,setTabGroupChoices:k}=(0,s.U)(),[E,F]=(0,o.useState)(y),S=[],{blockElementScrollPositionUntilNextRender:C}=(0,m.o5)();if(null!=f){const e=x[f];null!=e&&e!==E&&v.some((t=>t.value===e))&&F(e)}const N=e=>{const t=e.currentTarget,n=S.indexOf(t),a=v[n].value;a!==E&&(C(t),F(a),null!=f&&k(f,String(a)))},T=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=S.indexOf(e.currentTarget)+1;n=null!=(a=S[t])?a:S[0];break}case"ArrowLeft":{var o;const t=S.indexOf(e.currentTarget)-1;n=null!=(o=S[t])?o:S[S.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,r.Z)("tabs-container",d)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":c},g)},v.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:E===t?0:-1,"aria-selected":E===t,key:t,ref:e=>S.push(e),onKeyDown:T,onFocus:N,onClick:N},l,{className:(0,r.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":E===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(b.filter((e=>e.props.value===E))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==E})))))}function p(e){const t=(0,l.Z)();return o.createElement(c,(0,a.Z)({key:String(t)},e))}},9842:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),o=n(1262),r=n(2406),l=n(5488),i=n(5162);function s(e){return a.createElement(l.Z,null,a.createElement(i.Z,{value:"code",label:"Code"},a.createElement(r.Z,{language:"jsx"},e.source)),a.createElement(i.Z,{value:"example",label:"Example"},a.createElement(o.Z,null,(()=>e.example))))}},1538:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>w,contentTitle:()=>b,default:()=>k,frontMatter:()=>g,metadata:()=>v,toc:()=>y});var a=n(7462),o=n(7294),r=n(3905),l=n(9842),i=n(891);const s=(0,i.Np)({name:(0,i.$S)({label:"Name"}),bio:(0,i.$S)({label:"Bio",widget:(0,i.Pn)()}),age:(0,i.OL)({label:"Age"})});function m(){const[e,t]=(0,o.useState)({name:"Fabian S\xf6rqvist",bio:"This is my bio",age:33});return s.onDataChange((e=>{t(e)})),o.createElement(o.Fragment,null,o.createElement(i.mv,{form:s,data:e,hideSubmit:!0}),o.createElement("div",null,o.createElement("dl",null,o.createElement("dt",null,"Name"),o.createElement("dd",null,e.name),o.createElement("dt",null,"Bio"),o.createElement("dd",null,e.bio),o.createElement("dt",null,"Age"),o.createElement("dd",null,e.age))))}const d=(0,i.Np)({age:(0,i.OL)({label:"Age"})});function u(){const[e,t]=(0,o.useState)(void 0);return d.onComponentChange(((e,n)=>{"age"===e&&t(n)})),o.createElement(o.Fragment,null,o.createElement(i.H,{form:d,hideSubmit:!0}),e&&o.createElement("p",{style:{fontWeight:"bold"}},"You are ",e," years old"))}const c=(0,i.Np)({name:(0,i.$S)({label:"Name"}),bio:(0,i.$S)({label:"Bio",widget:(0,i.Pn)()}),age:(0,i.OL)({label:"Age"})});function p(){const[e,t]=(0,o.useState)(void 0);return c.onSubmit(((e,n)=>{e.preventDefault(),t(n)})),o.createElement(o.Fragment,null,o.createElement(i.H,{form:c}),e&&o.createElement("p",{style:{fontWeight:"bold"}},"Welcome ",e.name))}const h=(0,i.Np)({name:(0,i.$S)({label:"Name"}),age:(0,i.OL)({label:"Age"}),confirmAge:(0,i.Qr)({required:!0,label:"I confirm I'm at least 18 years of age"}),break:(0,i.Pr)({}),bio:(0,i.$S)({label:"Bio",widget:(0,i.Pn)()})});function f(){const[e,t]=(0,o.useState)(!1);return h.onPartValidate((async(e,t)=>{if(0===e){const e=[];return t.age<18&&e.push({path:"/age",message:"You are under age"}),t.name.toLowerCase().includes("sam")&&e.push({path:"/name",message:"Sam is always under age"}),e}if(1===e&&t.name.toLowerCase().includes("fabian")&&t.bio.toLowerCase().includes("computer science"))return[{path:"/bio",message:"Consider a different profession"}]})).onSubmit((e=>{e.preventDefault(),t(!0)})),e?o.createElement("p",null,"Welcome, you're the right person for the job!"):o.createElement(i.H,{form:h})}const g={sidebar_position:4},b="Form events",v={unversionedId:"guide/events",id:"guide/events",title:"Form events",description:"Each form created by fab4m provides several events that can be used",source:"@site/docs/guide/events.mdx",sourceDirName:"guide",slug:"/guide/events",permalink:"/docs/guide/events",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Theming",permalink:"/docs/guide/theming"},next:{title:"Component Widgets",permalink:"/docs/guide/widgets"}},w={},y=[{value:"Listen for all data changes",id:"listen-for-all-data-changes",level:2},{value:"Listen for changes in one specific component",id:"listen-for-changes-in-one-specific-component",level:2},{value:"Example",id:"example",level:3},{value:"Handling form submits",id:"handling-form-submits",level:2},{value:"Example",id:"example-1",level:3},{value:"Using events for custom validation",id:"using-events-for-custom-validation",level:2},{value:"Example",id:"example-2",level:3},{value:"Adding multiple form listeners to the same event",id:"adding-multiple-form-listeners-to-the-same-event",level:2}],x={toc:y};function k(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},x,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"form-events"},"Form events"),(0,r.kt)("p",null,"Each form created by fab4m provides several events that can be used\nto be notified about the form lifecycle. We provide events for when data changes,\nWhen data is submitted, and when data is being validated."),(0,r.kt)("h2",{id:"listen-for-all-data-changes"},"Listen for all data changes"),(0,r.kt)("p",null,"Each time any component in the form changes the ",(0,r.kt)("inlineCode",{parentName:"p"},"onDataChange")," event is fired.\nAll of the form data is passed to the form as an object."),(0,r.kt)(l.Z,{source:'import {\n  createForm,\n  textField,\n  integerField,\n  FormView,\n  textAreaWidget,\n} from "@fab4m/fab4m";\nimport React, { useState } from "react";\n\nconst form = createForm({\n  name: textField({ label: "Name" }),\n  bio: textField({ label: "Bio", widget: textAreaWidget() }),\n  age: integerField({ label: "Age" }),\n});\n\nexport function OnChangeExample() {\n  // We set up a state within this component with some defaults.\n  const [data, changeData] = useState({\n    name: "Fabian S\xf6rqvist",\n    bio: "This is my bio",\n    age: 33,\n  });\n  // When our data changes, we update our state, so that we have the\n  // current fresh form data available.\n  form.onDataChange((newData) => {\n    // This could be written just as form.onDataChange(changeData)\n    changeData(newData);\n  });\n  // We render our form using the FormView component, and render the\n  // information that is changed by the form on the fly.\n  return (\n    <>\n      <FormView form={form} data={data} hideSubmit={true} />\n      <div>\n        <dl>\n          <dt>Name</dt>\n          <dd>{data.name}</dd>\n          <dt>Bio</dt>\n          <dd>{data.bio}</dd>\n          <dt>Age</dt>\n          <dd>{data.age}</dd>\n        </dl>\n      </div>\n    </>\n  );\n}\n',example:(0,r.kt)(m,{mdxType:"OnChangeExample"}),mdxType:"Example"}),(0,r.kt)("h2",{id:"listen-for-changes-in-one-specific-component"},"Listen for changes in one specific component"),(0,r.kt)("p",null,"You might not want to handle the whole state, and instead only\nlisten for changes in certain components. This can be done\nusing the ",(0,r.kt)("inlineCode",{parentName:"p"},"onComponentChange")," event."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)(l.Z,{source:'import { createForm, integerField, StatefulFormView } from "@fab4m/fab4m";\nimport React, { useState } from "react";\n\nconst ageForm = createForm({\n  age: integerField({ label: "Age" }),\n});\n\nexport function OnComponentChangeExample() {\n  // We store the age in this state.\n  const [age, changeAge] = useState(undefined);\n  // When the age component is updated, we update our state.\n  ageForm.onComponentChange((name, value) => {\n    if (name === "age") {\n      changeAge(value);\n    }\n  });\n  // Render our form, and print out our current age when it\'s available.\n  return (\n    <>\n      <StatefulFormView form={ageForm} hideSubmit={true} />\n      {age && <p style={{ fontWeight: "bold" }}>You are {age} years old</p>}\n    </>\n  );\n}\n',example:(0,r.kt)(u,{mdxType:"OnComponentChangeExample"}),mdxType:"Example"}),(0,r.kt)("h2",{id:"handling-form-submits"},"Handling form submits"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSubmit")," function to handle form submissions. This function is called\nwhenever the form is submitted and it's only called if the form data is valid,\nso you can rely on your data being complete at this point."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)(l.Z,{source:'import {\n  createForm,\n  textField,\n  integerField,\n  textAreaWidget,\n  StatefulFormView,\n} from "@fab4m/fab4m";\nimport React, { useState } from "react";\n\nconst form = createForm({\n  name: textField({ label: "Name" }),\n  bio: textField({ label: "Bio", widget: textAreaWidget() }),\n  age: integerField({ label: "Age" }),\n});\n\nexport function OnSubmitExample() {\n  // This state will be updated with the data when we submit the form.\n  const [submitted, changeSubmittedData] = useState(undefined);\n  form.onSubmit((e, data) => {\n    // The event is a React FormEvent.\n    e.preventDefault();\n    // We update the state with our data.\n    changeSubmittedData(data);\n  });\n  return (\n    <>\n      <StatefulFormView form={form} />\n      {submitted && (\n        <p style={{ fontWeight: "bold" }}>Welcome {submitted.name}</p>\n      )}\n    </>\n  );\n}\n',example:(0,r.kt)(p,{mdxType:"OnSubmitExample"}),mdxType:"Example"}),(0,r.kt)("h2",{id:"using-events-for-custom-validation"},"Using events for custom validation"),(0,r.kt)("p",null,"Sometimes you need to add custom validation for your form, for instance,\nif you need to verify that an email doesn't exist, or any other\nvalidation that requires data. You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"onPartValidate")," event for this.\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"onPartValidate")," function is called each timea form part is submitted."),(0,r.kt)("p",null,"the listener is asynchronous, so any required server validation\ncan occur within."),(0,r.kt)("p",null,"Errors encountered should be returned as an array with the following structure:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'[{\n    path: "/component" // <--- This is a JSON pointer,\n    message: "This is the message that will be shown in the form"\n}];\n')),(0,r.kt)("p",null,"See the validator documentation for more information about validating your data."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can also define custom component validators. This works well when you only need\nthe data from one specific component, but if you require the data from the full form\nyou're probably better off using this event instead.\nSee the documentation on how to create your own component validators.")),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("p",null,"The example below performs validation on each of the form parts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'On part 1, we ensure that the provided age is over 18 and that the name doesn\'t contain "sam"'),(0,r.kt)("li",{parentName:"ul"},'On part 2, We encourage the user to switch profession, if the name provided in part 1 contains "Fabian" and the text "Computer science" is part of the bio.')),(0,r.kt)(l.Z,{source:'import React, { useState } from "react";\nimport {\n  createForm,\n  textField,\n  integerField,\n  booleanField,\n  textAreaWidget,\n  StatefulFormView,\n  pageBreak,\n} from "@fab4m/fab4m";\n\nconst partValidateForm = createForm({\n  name: textField({ label: "Name" }),\n  age: integerField({ label: "Age" }),\n  confirmAge: booleanField({\n    required: true,\n    label: "I confirm I\'m at least 18 years of age",\n  }),\n  break: pageBreak({}),\n  bio: textField({ label: "Bio", widget: textAreaWidget() }),\n});\nexport function OnPartValidateForm() {\n  const [completed, changeCompleted] = useState(false);\n  partValidateForm\n    .onPartValidate(async (part, data) => {\n      if (part === 0) {\n        const errors = [];\n        if (data.age < 18) {\n          errors.push({ path: "/age", message: "You are under age" });\n        }\n        if (data.name.toLowerCase().includes("sam")) {\n          errors.push({ path: "/name", message: "Sam is always under age" });\n        }\n        return errors;\n      }\n      if (\n        part === 1 &&\n        data.name.toLowerCase().includes("fabian") &&\n        data.bio.toLowerCase().includes("computer science")\n      ) {\n        return [{ path: "/bio", message: "Consider a different profession" }];\n      }\n    })\n    .onSubmit((e) => {\n      e.preventDefault();\n      changeCompleted(true);\n    });\n  return completed ? (\n    <p>Welcome, you\'re the right person for the job!</p>\n  ) : (\n    <StatefulFormView form={partValidateForm} />\n  );\n}\n',example:(0,r.kt)(f,{mdxType:"OnPartValidateForm"}),mdxType:"Example"}),(0,r.kt)("h2",{id:"adding-multiple-form-listeners-to-the-same-event"},"Adding multiple form listeners to the same event"),(0,r.kt)("p",null,"Fab4m forms support multiple event listeners for the same event. By default we override\nthe registered events when we add any event listener, because you normally add these events\ninside of a React component, and we want to provide the current event handler function to avoid weird scope errors."),(0,r.kt)("p",null,"If you want to use multiple events you can do that by telling the form to append the event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"form.onChange(() => {\n  // Listener one.\n}, true).onChange(() => {\n  // Listener two.\n}, true)\n")))}k.isMDXComponent=!0}}]);