"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2022/12/16/fab4m-and-laravel","metadata":{"permalink":"/blog/2022/12/16/fab4m-and-laravel","source":"@site/blog/2022-12-16-fab4m-and-laravel.md","title":"Using fab4m with Laravel and Inertia.js","description":"This is the first part in a blog series about how you can use fab4m together","date":"2022-12-16T00:00:00.000Z","formattedDate":"December 16, 2022","tags":[],"readingTime":6.725,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Hello world!","permalink":"/blog/2022/12/11/hello-world"}},"content":"This is the first part in a blog series about how you can use fab4m together\\nwith different backend frameworks.\\n\\nAt my workplace ([Leanlab.co](https://leanlab.co/)) we use Laravel as our web framework and we are veryhappy with it. That\'s why it\'s only natural to start there!\\n\\nIn this blog post we are going to set up a laravel installation with\\n[Laravel\\nbreeze](https://laravel.com/docs/9.x/starter-kits#laravel-breeze), a\\nstarter kit for laravel that provides you with a solid boilerplate to\\nstart building any app.\\n\\nTo get things integrated with react we are using [Inertja.js](https://inertiajs.com/), a way to easily tie your react frontend together with your backend.\\n\\n## Installing laravel\\n\\nHave a look at the [Laravel installation guide](https://laravel.com/docs/9.x/installation) for the full details,\\nbut in short, if you have [php](https://php.net), [composer](https://getcomposer.org/) and [node](https://nodejs.org/en/) installed you can go ahead:\\n\\n```bash\\ncomposer create-project laravel/laravel fab4m-example\\n```\\n\\nThis will get you started with a blank laravel project.\\n\\n## Getting everything in place with docker\\n\\nI usually work with docker to get things like mysql and other related services going.\\n    Luckily laravel provides us with an easy way to do that called [laravel sail](https://laravel.com/docs/9.x/sail):\\n\\n```bash\\ncomposer require laravel/sail --dev\\nphp artisan sail:install\\n```\\n\\nThis will install laravel sail and get everything configured for you!\\n\\nNow you can run:\\n\\n```bash\\nvendor/bin/sail up -d\\n```\\n\\nTo get your full environment up and running.\\n\\nNow, browse to http://localhost you should see your environment up and running!\\n\\n## Setting up laravel breeze\\n\\nLaravel breeze gives us a flying start with authentication and a nice setup\\nto get you going with React. The starter kit gets you going with all the tooling\\nyou need, pretty neat!\\n\\n```bash\\ncomposer require laravel/breeze --dev\\nphp artisan breeze:install react\\n```\\n\\n## Running the migrations\\n\\nLaravel breeze provides you with a user model for authentication.\\nYou can get the schema installed by migrating:\\n\\n```bash\\nvendor/bin/sail artisan migrate\\n```\\n\\n## Try it out\\n\\nVisit: [http://localhost/register](http://localhost/register)\\n\\nYou should see a form to register and you can perform the registration process!\\n\\n## Install fab4m\\n\\nNow it\'s time for the fun part, let\'s see how we can use fab4m to complement\\nour already amazing stack! Let\'s begin by installing it:\\n\\n```bash\\nnpm install --save @fab4m/fab4m\\n```\\n\\n## Make a diary model, migration and controller\\n\\nLaravel provides us with a nice way of generating a lot of boilerplate code.\\n\\nThe following command creates:\\n* A [Laravel model](https://laravel.com/docs/9.x/eloquent) for our diary posts\\n* A [Laravel migration](https://laravel.com/docs/9.x/migrations) for setting up the diary schema\\n* A [Laravel resource controller](https://laravel.com/docs/9.x/controllers#resource-controllers) for handling our CRUD operations.\\n\\n```bash\\nphp artisan make:model Diary -c -m -r\\n```\\n\\n## Let\'s fill in the blanks!\\n\\nNow we have some actual coding to do, finally!\\n\\nLet\'s start with our migration,there should be a file called [date]-create_diaries_table.php in your database/migrations folder, edit the `up()` function to this:\\n\\n```php\\npublic function up()\\n{\\n    Schema::create(\'diaries\', function (Blueprint $table) {\\n        $table->id();\\n        $table->text(\'title\');\\n        $table->text(\'body\');\\n        $table->json(\'tags\')->nullable();\\n        $table->timestamps();\\n    });\\n}\\n```\\n\\nThis will create a database table with a title and body text field and a json field for storing tags for the diaries.\\n\\nNext up, edit your model (`app/Models/Diary.php`) a bit:\\n\\n```php\\nclass Diary extends Model\\n{\\n    use HasFactory;\\n\\n    protected $fillable = [\'title\', \'body\', \'tags\'];\\n    protected $casts = [\'tags\' => \'json\'];\\n}\\n```\\n\\nThis will make the title, body and tags fillable when saving data.\\nWe also indicate that the tags is json data so that it will be properly handled.\\n\\nThen edit our controller to render an inertia javascript page for showing our form:\\n\\n```php\\npublic function create()\\n{\\n    return Inertia::render(\'Diary/Create\', []);\\n}\\n```\\n\\nFinally we need to register our new resource controller among our routes, this is done in routes/web.php file:\\n\\n```php\\nRoute::resource(\'diaries\', DiaryController::class);\\n```\\n\\nWe\'re ready to render our form on the client side!\\n\\n## Setting up the fab4m form\\n\\nLet\'s start with creating a fab4m form, create a file in resources/js/Forms/Diary.js:\\n\\n```jsx\\nimport {\\n    createForm,\\n    textField,\\n    textAreaWidget,\\n    tagsWidget,\\n} from \\"@fab4m/fab4m\\";\\n\\nexport default createForm({\\n    title: textField({ label: \\"Title\\", required: true }),\\n    body: textField({\\n        label: \\"Body\\",\\n        required: true,\\n        widget: textAreaWidget(),\\n    }),\\n    tags: textField({\\n        label: \\"Tags\\",\\n        multiple: true,\\n        multipleWidget: tagsWidget(),\\n    }),\\n});\\n```\\n\\nWe create a simple form with a title and a body field, and we spice it up\\nwith an autocomplete tags field. This allows us to re-use the form wherever we like.\\n\\nWith the form in hand we can now create our first Inertia page. Create the file `resources/js/Pages/Diary/Create.jsx`:\\n\\n```jsx\\nimport GuestLayout from \\"@/Layouts/GuestLayout\\";\\nimport { Inertia } from \\"@inertiajs/inertia\\";\\nimport { Head } from \\"@inertiajs/inertia-react\\";\\nimport \\"@fab4m/fab4m/css/basic/basic.css\\";\\nimport form from \\"../../Forms/Diary\\";\\nimport { StatefulFormView } from \\"@fab4m/fab4m\\";\\n\\nexport default function Create() {\\n    form.onSubmit((e, data) => {\\n        e.preventDefault();\\n        Inertia.post(route(\\"diaries.store\\"), data);\\n    });\\n    return (\\n        <GuestLayout>\\n            <Head title=\\"Create new diary\\" />\\n            <h2 className=\\"font-semibold text-xl text-gray-800 leading-tight\\">\\n                Create new diary\\n            </h2>\\n            <div className=\\"py-12\\">\\n                <div className=\\"max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6\\">\\n                    <StatefulFormView form={form} />\\n                </div>\\n            </div>\\n        </GuestLayout>\\n    );\\n}\\n```\\n\\nNotice that we add an `onSubmit()` handler on the form. That handler is then used\\nto submit our data back to laravel.\\n\\nThe GuestLayout is provided by the breeze boilerplate and provides\\na basic header and footer. The real magic happens in our StatefulFormView where\\nwe render the form. We use the `StatefulFormView` component to render the form.\\nThe state is then handled internally.\\n\\nVisit [http://localhost/diaries/create](http://localhost/diaries/create)\\n\\nYou should see our newly created form in action, and if you submit the\\nform you will be presented with an error that your method for creating\\nyour diary isn\'t returning anything.\\n\\n## Saving your laravel model\\n\\nHead over to `app/Http/Controllers/DiaryController.php`and add the following to your `store` method:\\n\\n```php\\nuse use Illuminate\\\\Http\\\\Request;\\nuse Illuminate\\\\Support\\\\Facades\\\\Redirect;\\n\\n...\\n\\npublic function store(Request $request)\\n{\\n    $diary = Diary::create($request->validate([\\n          \'title\' => [\'required\', \'string\'],\\n          \'body\' => [\'required\', \'string\'],\\n          \'tags\' => [\'nullable\', \'array\'],\\n       ]));\\n     return Redirect::route(\'diaries.show\', [$diary->id]);\\n}\\n```\\n\\nOnce the form is saved you will be redirected to the show page. That page can be implemented the same way as the create page:\\n\\n```php\\npublic function show(Diary $diary)\\n{\\n    return Inertia::render(\'Diary/Show\', [\'diary\' => $diary]);\\n}\\n```\\n\\nNotice that we\'re sending the diary along. This diary is then available in the page component, `resources/views/js/Pages/Show.jsx`:\\n\\n```jsx\\nimport GuestLayout from \\"@/Layouts/GuestLayout\\";\\nimport { Inertia } from \\"@inertiajs/inertia\\";\\nimport { Head, Link } from \\"@inertiajs/inertia-react\\";\\n\\nexport default function Show({ diary }) {\\n    return (\\n        <GuestLayout>\\n            <Head title={diary.title} />\\n            <h2 className=\\"font-semibold text-xl text-gray-800 leading-tight\\">\\n                Diary: {diary.title}\\n            </h2>\\n            <div className=\\"py-12\\">\\n                <article className=\\"max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6\\">\\n                    <h3 class=\\"font-bold\\">Entry</h3>\\n                    <p className=\\"mb-4\\">{diary.body}</p>\\n                    <h3 class=\\"font-bold\\">Tags</h3>\\n                    <ul className=\\"list-disc ml-8 mt-1\\">\\n                        {diary.tags.map((tag, i) => (\\n                            <li key={i}>{tag}</li>\\n                        ))}\\n                    </ul>\\n                    <Link\\n                        className=\\"text-blue-700\\"\\n                        href={route(\\"diaries.edit\\", [diary.id])}\\n                    >\\n                        Edit\\n                    </Link>\\n                </article>\\n            </div>\\n        </GuestLayout>\\n    );\\n}\\n```\\n\\n## And that\'s it!\\n\\nWe have a working example. If the form is this basic, you probably want to\\nstick with Laravel validation, but if you want to utilize the full power of fab4m,\\nyou can use JSON schema instead to validate your submission. Let\'s explode how that would look like.\\n\\n## Generating the JSON Schema\\n\\nYou can generate a json schema from any form by using the `generateSchema` function:\\n\\n```jsx\\nconsole.log(JSON.stringify(generateSchema(form)));\\n```\\n\\nThe output from this function will be the json schema that you can use to validate your form anywhere.\\n\\nAdd the schema to your function:\\n```php\\nclass DiaryController extends Controller\\n{\\n    private string $schema = <<<JSON\\n{\\"title\\":\\"Form data\\",\\"description\\":\\"A form submission\\",\\"type\\":\\"object\\",\\"properties\\":{\\"title\\":{\\"type\\":\\"string\\",\\"title\\":\\"Title\\",\\"minLength\\":1},\\"body\\":{\\"type\\":\\"string\\",\\"title\\":\\"Title\\",\\"minLength\\":1},\\"tags\\":{\\"type\\":\\"array\\",\\"title\\":\\"Tags\\",\\"items\\":{\\"type\\":\\"string\\",\\"title\\":\\"Tags\\"},\\"minItems\\":0}},\\"required\\":[\\"title\\",\\"body\\"],\\"dependencies\\":{}}\\nJSON;\\n\\n...\\n\\n}\\n```\\n\\nWith the schema in place, you can use any json schema validator to validate it. Here we use the [opis json-schema package](https://opis.io/json-schema):\\n\\n```bash\\ncomposer require opis/json-schema\\n```\\n\\n## Using the JSON schema for validation\\n\\nNow that we have our schema available we can use the json schema validator\\ninstead of the native laravel validation to do the work for us:\\n\\n```php\\npublic function store(Request $request)\\n{\\n  $validator = new Validator();\\n  $result = $validator->validate((object)$request->all(), $this->schema);\\n  if (!$result->isValid()) {\\n    abort(422, (new ErrorFormatter())->format($result->error()));\\n  }\\n  $diary = Diary::create(\\n    $request->all();\\n  );\\n  return Redirect::route(\\"diaries.show\\", [$diary->id]);\\n}\\n```\\n\\n## That\'s a wrap!\\n\\nThis is an example of how to integrate fab4m into a Laravel app.\\nThis example wasn\'t particularly exciting in terms of form building,\\nso in the next blog post I will expand on this application to include\\nsomething that would be more of a challenge!\\n\\nThe full source code for this blog post is available [here](https://github.com/fab4m-forms/fab4m-laravel-example)."},{"id":"/2022/12/11/hello-world","metadata":{"permalink":"/blog/2022/12/11/hello-world","source":"@site/blog/2022-12-11-hello-world.md","title":"Hello world!","description":"It\'s been a long time coming, but I finally released the first beta of","date":"2022-12-11T00:00:00.000Z","formattedDate":"December 11, 2022","tags":[],"readingTime":1.32,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Using fab4m with Laravel and Inertia.js","permalink":"/blog/2022/12/16/fab4m-and-laravel"}},"content":"It\'s been a long time coming, but I finally released the first beta of\\nfab4m, a better way to work with forms!\\n\\nWhen working with development I always find dealing with forms to be\\nthe most time consuming and tedious part of any project. There are\\nmany solutions out there, but they tend to tailor to only part of the\\nproblem: validation, rendering, and so on.\\n\\nI set out to finally solve the problem once and for all. It took way\\nmore time than I anticipated, but here it is!\\n\\nWhat are the highlights then?\\n\\nInstead of working directly with markup, you structure your form using a javascript object:\\n\\n```jsx\\nimport { createForm } from \\"@fab4m/fab4m\\";\\nconst form = createForm({\\n    title: textField({ label: \\"Title\\" }),\\n});\\n```\\n\\nThis makes it easy to build your structure however you like without having to think about how to structure the markup.\\n\\nThe form is made up from [components](/docs/guide/define-a-form). The component describes one part of the form and the data that it contains.\\n\\nEach component can have different widgets. The widget is responsible for rendering the component:\\n\\n```\\nconst form = createForm({\\n    title: textField({ label: \\"Title\\", widget: optionsWidget({}, [\\"one\\", \\"two\\"] }),\\n});\\n```\\n\\n\\nIn addition to this there\'s also [validators](/docs/guide/validators) and visibility rules to make it easy to validate your form.\\n\\nFab4m allows you to easily validate form submissions anywhere. You can generate a [JSON Schema](https://json-schema.org/) from any form.\\n\\nThe whole form structure can be [serialized](/docs/guide/serializing) so that it can\\nbe stored easily.\\n\\nThere are many more features, have a look in the [docs](/docs/intro) and try it out!"}]}')}}]);